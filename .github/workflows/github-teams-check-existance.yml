# Workflow for syncing CSV labels to GitHub Labels
name: Github Team - Check Existance

on:
  # Runs on pushes targeting the default branch
  issues: {}

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: write

jobs:
  Check-Team-Existance:
    name: Check-Team-Existance
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # [Setup] task(s)
      # ---------------
      - name: "Setup agent"
        shell: pwsh
        run: |
          # Load used functions
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

          # Define PS modules to install on the runner
          $modules = @(
              @{ Name = 'Az.Accounts' },
              @{ Name = 'Az.Resources' }
          )

          # Set agent up
          Set-EnvironmentOnAgent -PSModules $modules

      - uses: tibdex/github-app-token@v2
        id: generate-token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: compare
        id: compare
        shell: pwsh
        run: |
          Function Get-AvmCsv {
              [CmdletBinding()]
              param (
                  [Parameter(Mandatory)]
                  [ValidateSet('Bicep-Resource','Bicep-Pattern', 'Terraform-Resource','Terraform-Pattern')]
                  [string]$ModuleIndex
              )

              # Retrieve the CSV file
              if ($ModuleIndex -eq 'Bicep-Resource') {
                  try {
                      $unfilteredCSV = Invoke-WebRequest -Uri "https://aka.ms/avm/index/bicep/res/csv"   
                  }
                  catch {
                      Write-Error "Unable to retrieve CSV file - Check network connection."
                  }
              }
              elseif ($ModuleIndex -eq 'Bicep-Pattern') {
                  try {
                      $unfilteredCSV = Invoke-WebRequest -Uri "https://aka.ms/avm/index/bicep/ptn/csv"
                  }
                  catch {
                      Write-Error "Unable to retrieve CSV file - Check network connection."
                  }
              }
              elseif ($ModuleIndex -eq 'Terraform-Resource') {
                  try {
                      $unfilteredCSV = Invoke-WebRequest -Uri "https://aka.ms/avm/index/tf/res/csv"
                  }
                  catch {
                      Write-Error "Unable to retrieve CSV file - Check network connection."
                  }
              }
              elseif ($ModuleIndex -eq 'Terraform-Pattern') {
                  try {
                      $unfilteredCSV = Invoke-WebRequest -Uri "https://aka.ms/avm/index/tf/ptn/csv"
                  }
                  catch {
                      Write-Error "Unable to retrieve CSV file - Check network connection."
                  }
              }
              else {
                  Write-Error "Invalid ModuleIndex value"
                  exit 1
              }

              # Convert the CSV content to a PowerShell object
              $formattedBicepFullCsv = ConvertFrom-CSV $unfilteredCSV.Content
              # Filter the CSV data where the ModuleStatus is 'Module Available :green_circle:'
              $filterCsvAvailableBicepModule = $formattedBicepFullCsv | Where-Object {$_.ModuleStatus -eq 'Module Available :green_circle:'}
              
              # Loop through each item in the filtered data
              foreach ($item in $filterCsvAvailableBicepModule) {
                  # Remove '@Azure/' from the ModuleOwnersGHTeam property
                  $item.ModuleOwnersGHTeam = $item.ModuleOwnersGHTeam -replace '@Azure/', ''
                  # Remove '@Azure/' from the ModuleContributorsGHTeam property
                  $item.ModuleContributorsGHTeam = $item.ModuleContributorsGHTeam -replace '@Azure/', ''
              }

              # Return the filtered and modified data
              return $filterCsvAvailableBicepModule
          }

          Function Get-AvmResTfCsv {
              # Retrieve the CSV file
              $unfilteredBicepCSV = Invoke-WebRequest -Uri "https://aka.ms/avm/index/tf/res/csv"
              # Convert the CSV content to a PowerShell object
              $formattedBicepFullCsv = ConvertFrom-CSV $unfilteredBicepCSV.Content
              # Filter the CSV data where the ModuleStatus is 'Module Available :green_circle:'
              $filterCsvAvailableBicepModule = $formattedBicepFullCsv | Where-Object {$_.ModuleStatus -eq 'Module Available :green_circle:'}
              
              # Loop through each item in the filtered data
              foreach ($item in $filterCsvAvailableBicepModule) {
                  # Remove '@Azure/' from the ModuleOwnersGHTeam property
                  $item.ModuleOwnersGHTeam = $item.ModuleOwnersGHTeam -replace '@Azure/', ''
                  # Remove '@Azure/' from the ModuleContributorsGHTeam property
                  $item.ModuleContributorsGHTeam = $item.ModuleContributorsGHTeam -replace '@Azure/', ''
              }

              # Return the filtered and modified data
              return $filterCsvAvailableBicepModule
          }

          Function Get-GitHubTeams {
              [CmdletBinding()]
              param (
                  [Parameter(Mandatory)]
                  [ValidateSet('AllTeams', 'AllResource', 'AllPattern', 'AllBicep', 'AllBicepResource', 'AllBicepResourceOwners', 'AllBicepPattern', 'AllTerraform', 'AllTerraformResource','AllTerraformResourceOwners', 'AllTeraformPattern' )]
                  [string]$TeamFilter
              )
              # use githubCLI to get all teams in Azure organization
              gh auth status
              $rawGhTeams = gh api orgs/Azure/teams --paginate
              
              # Convert JSON to PowerShell Object
              $formattedGhTeams = ConvertFrom-Json $rawGhTeams
              
              # Filter Teams for AVM
              $filterAvmGhTeams = $formattedGhTeams | Where-Object {$_.name -like 'avm-*'}    
              # Filter Teams for AVM Resource Modules
              $filterAvmResGhTeams = $filterAvmGhTeams | Where-Object {$_.name -like '*res-*'}
              # Filter Teams for AVM Pattern Modules
              $filterAvmPtnGhTeams = $filterAvmGhTeams | Where-Object {$_.name -like '*ptn-*'}
              # Filter AVM Module Teams for Bicep
              $filterAvmBicepGhTeams = $filterAvmGhTeams | Where-Object {$_.name -like '*bicep'}
              # Filter AVM Module Teams for Bicep Resource Modules
              $filterAvmBicepResGhTeams = $filterAvmBicepGhTeams | Where-Object {$_.name -like '*res-*'}
              # Filter AVM Module Teams for Bicep Resource Modules Owners
              $filterAvmBicepResGhTeamsOwners = $filterAvmBicepResGhTeams | Where-Object {$_.name -like '*owners-*'}
              # Filter AVM Module Teams for Bicep Pattern Modules
              $filterAvmBicepPtnGhTeams = $filterAvmBicepGhTeams | Where-Object {$_.name -like '*ptn-*'}
              # Filter AVM Module Teams for Terraform
              $filterAvmTfGhTeams = $filterAvmGhTeams | Where-Object {$_.name -like '*tf'}
              # Filter AVM Module Teams for Terraform Resource Modules
              $filterAvmTfResGhTeams = $filterAvmTfGhTeams | Where-Object {$_.name -like '*res-*'}
              # Filter AVM Module Teams for Terraform Resource Modules Owners
              $filterAvmTfResGhTeamsOwners = $filterAvmTfResGhTeams | Where-Object {$_.name -like '*owners-*'}
              # Filter AVM Module Teams for Terraform Pattern Modules
              $filterAvmTfPtnGhTeams = $filterAvmTfGhTeams | Where-Object {$_.name -like '*ptn-*'}

              switch ($TeamFilter) {
                  'AllTeams' { return $filterAvmGhTeams }
                  'AllResource' { return $filterAvmResGhTeams }
                  'AllPattern' { return $filterAvmPtnGhTeams }
                  'AllBicep' { return $filterAvmBicepGhTeams }
                  'AllBicepResourceOwners' { return $filterAvmBicepResGhTeamsOwners }
                  'AllBicepResource' { return $filterAvmBicepResGhTeams }
                  'AllBicepPattern' { return $filterAvmBicepPtnGhTeams }
                  'AllTerraform' { return $filterAvmTfGhTeams }
                  'AllTerraformResource' { return $filterAvmTfResGhTeams }
                  'AllTerraformResourceOwners' { return $filterAvmTfResGhTeamsOwners }
                  'AllTeraformPattern' { return $filterAvmTfPtnGhTeams }
              }
          }

          Function Compare-BicepOwnersTeams {

              $csvdata = Get-AvmCsv -ModuleIndex Bicep-Resource

              $ghTeamData = Get-GitHubTeams -TeamFilter AllBicepResourceOwners

              # Iterate through each object in $csv
              foreach ($module in $csvdata) {
                  # Assume no match is found initially
                  $matchFound = $false

                  # Check each object in $ghTeam for a match
                  foreach ($ghTeam in $ghTeamData) {
                      if ($module.ModuleOwnersGHTeam -eq $ghTeam.name) {
                          # If a match is found, set flag to true and break out of the loop
                          $matchFound = $true
                          Write-Output "Match found for: $($module.ModuleOwnersGHTeam)"
                          break
                      }
                  }

                  # If no match was found, output the item from $csv
                  if (-not $matchFound) {
                      Write-Error "No match found for: $($module.ModuleOwnersGHTeam), Current Owner is $($module.PrimaryModuleOwnerGHHandle)"
                  }
              }
          }

          Function Compare-TerraformOwnersTeams {

              $csvdata = Get-AvmCsv Terraform-Resource

              $ghTeamData = Get-GitHubTeams -TeamFilter AllTerraformResourceOwners

              # Iterate through each object in $csv
              foreach ($module in $csvdata) {
                  # Assume no match is found initially
                  $matchFound = $false

                  # Check each object in $ghTeam for a match
                  foreach ($ghTeam in $ghTeamData) {
                      if ($module.ModuleOwnersGHTeam -eq $ghTeam.name) {
                          # If a match is found, set flag to true and break out of the loop
                          $matchFound = $true
                          Write-Output "Match found for: $($module.ModuleOwnersGHTeam)"
                          break
                      }
                  }

                  # If no match was found, output the item from $csv
                  if (-not $matchFound) {
                      Write-Error "No match found for: $($module.ModuleOwnersGHTeam), Current Owner in $($module.PrimaryModuleOwnerGHHandle)"
                  }
              }
          }
          Compare-BicepOwnersTeams
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
